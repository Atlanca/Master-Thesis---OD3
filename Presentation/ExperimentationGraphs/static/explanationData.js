allObjects = [{"type": "Package", "object": "sphere_io_package_1", "dataTypeProperties": []}, {"type": "Package", "object": "web_application_server_package_1", "dataTypeProperties": []}, {"type": "Package", "object": "client_package_1", "dataTypeProperties": []}, {"type": "Package", "object": "web_applicaton_server_controller_package_1", "dataTypeProperties": [["Description", "Play Framework is applying the Front Controller and Application Controller design patterns to split the Controller logic between the common logic, located in the Front Controller, and the one specific for each request, called Application Controller. The Front Controller is mainly formed by the RoutingSystem, which is in charge of receiving, analyzing and dispatching every request to the appropriate application controller.\n\nAll application controllers of the system are shown in Figure 4.39, along with some classes that are used as filters. These filters intercept the application controller invocation and allows to execute code before and after the action is invoked. Filters are applied as a chain of filters to any desired controller action, although for simplicity the diagram is not specifying which particular actions are using the filter. A typical filter example is the Authorization class, that verifies the customer is correctly identified to the system before accessing a restricted functionality, otherwise it redirects the user to the login screen."]]}, {"type": "Feature", "object": "purchase_products", "dataTypeProperties": [["Description", "Figure 3.4 shows the use cases related to purchasing products. They can be clearly divided into two different topics: on the one hand all those use cases for managing the shopping cart (i.e. adding, updating and removing items), on the other hand those related to placing and listing orders. When placing an order the customer may be requested to pay online, in which case the payment platform will provide the necessary means. Anonymous as much as registered customers can place orders, but only customers that have been identified are able to list their own orders, otherwise they are requested to identify themselves."]]}, {"type": "ClassEntity", "object": "MiniCart", "dataTypeProperties": []}, {"type": "Package", "object": "web_application_server_model_package_1", "dataTypeProperties": []}, {"type": "ClassPackage", "object": "Forms", "dataTypeProperties": [["Description", "Lastly, there are a group of classes related to the web forms and the payment information received by the system (see Figure 4.34). They handle all the server-side validation for every parameter and may also provide helpful getters and setters to easily convert model data into form data, and vice versa (e.g. an Address class instance would be converted into the appropriate form fields street, city, country, etc.)\n\nThese form classes also host the methods generating the different content that must be sent back to the client in relation to the result of the form submission. For example, when updating a line item from the cart, a success response contains a message for the user and all the shopping cart related information. This related information is generated with some other methods located in the forms as well, that convert a model class instance into JSON data."]]}, {"type": "ClassEntity", "object": "Mail", "dataTypeProperties": [["Description", "The system also requires a class to send emails through any email system of preference. The Mail class will cover this functionality, as long as the SMTP17 details of the email system are provided. Given that Heroku does not provide an internal SMTP server, the deployed version of this project will need to use an external server like Mailjet, a cloud emailing platform that offers several features that may be of interest for potential clients."]]}, {"type": "ClassEntity", "object": "ViewHelper", "dataTypeProperties": [["Description", "On the other hand, the View Helper is a common design pattern that allows to separate logic that otherwise needs to be integrated in the template, in this project applied with the ViewHelper class. Although templates in Play Framework enables to use all the potential of the programming language Scala, it is a good practice to keep complex logic out of the templates. All this logic is then placed in these helper classes and called from the views as necessary."]]}, {"type": "ClassEntity", "object": "ControllerHelper", "dataTypeProperties": [["Description", "The Model component is also containing different helpers, where some particular logic of this web-shop is located. The ControllerHelper is composed of methods that allows to abstract some common logic that is used in the Controller component (i.e. logic to handle and display messages and errors) or data coming from SPHERE.IO requiring some previous manipulation before it is used (i.e. get default category of a product or get address book of the current customer)."]]}, {"type": "ClassEntity", "object": "Sphere", "dataTypeProperties": [["Description", "As described at the beginning of the section System Logical Architectural 4.2, the logic of the model component is largely located in the SPHERE.IO Play SDK, which contains all the commerce logic and allows to access all data stored in the e-commerce backend. The Sphere class shown in the diagram below (Figure 4.33) is precisely the entry point for SPHERE.IO."]]}, {"type": "ClassEntity", "object": "Payment", "dataTypeProperties": [["Description", "There is also a Payment class, a small library that will help to communicate with the Optile API, that requires the messages to be sent using XML. As explained before (see section 4.2.1.2), Optile needs to be implemented in an incremental way, reason why the library can effortless cover all five levels of integration, thus allowing developers to easily switch to the level it fits best for them."]]}, {"type": "ClassPackage", "object": "CartForms", "dataTypeProperties": []}, {"type": "Package", "object": "web_application_server_view_package_1", "dataTypeProperties": [["Description", "The View component is formed of several templates that are directly called by the Controller component, as seen in the internal design diagrams of the system. All these templates are making use of a main template file that provides a common HTML structure to all the pages, such as the basic contents and imports of scripts and stylesheets. They achieve this by importing the main template, following the design pattern called View Composition (Figure 4.36).\n\nJust as in the previous example, the composite views are importing the contents of many other simple views, like the helpers and forms displayed in Figure 4.37. Both types of templates are usually offering components that are repeated throughout all client pages, although sometimes the separation is only intended to extract large pieces of meaningful HTML content from the composite views, as it is usually the case of the form templates. Unlike forms and helpers, mail templates are not meant for view composition, but are directly used to generate the HTML body of the emails sent by the system."]]}, {"type": "UseCase", "object": "browse_catalog", "dataTypeProperties": [["Description", "Figure 3.7 displays the sequence diagram for the browse catalog top-level use case, one of the many possible success scenarios. In this case the user will usually go to the home page, select a 40 category and then filter or sort the products until he eventually finds one of interest. Then he will probably ask for the details of the product and next he will add it to the shopping cart."]]}, {"type": "Diagram", "object": "figure_4.2_logical_architecture", "dataTypeProperties": [["Description", "Diagram of the logical architecture of the system between contexts."]]}, {"type": "Diagram", "object": "figure_4.39_web_application_server_contoller_component", "dataTypeProperties": [["Description", "Overview of the controllers and filters of the server-side Controller component."]]}, {"type": "Diagram", "object": "figure_3.4_purchase_products", "dataTypeProperties": [["Description", "Use case diagram showing the use cases of the purchase products package."]]}, {"type": "Diagram", "object": "Figure_4.35_client_side_model_component", "dataTypeProperties": [["Description", "Overview of the client-side Model component"]]}, {"type": "Diagram", "object": "figure_4.33_web_application_server_model_component", "dataTypeProperties": [["Description", "Overview of the server-side Model component"]]}, {"type": "Diagram", "object": "figure_4.34_web_application_server_form_model_component", "dataTypeProperties": [["Description", "Overview of the Form package of the server-side Model component."]]}, {"type": "Diagram", "object": "figure_4.37_web_application_server_simple_views", "dataTypeProperties": [["Description", "Overview of the simple views of the server-side View component."]]}, {"type": "Diagram", "object": "figure_4.36_web_application_server_view_component", "dataTypeProperties": [["Description", "Overview of the composite views and main template of the server-side View component."]]}, {"type": "Diagram", "object": "figure_3.7_browse_catalog", "dataTypeProperties": [["Description", "Sequence diagram of the browse catalog top-level use case, success scenario."]]}, {"type": "Technology", "object": "handlebars", "dataTypeProperties": [["Description", "Handlebars is the web template system used in this project to manage client-side templates. It is a JavaScript implementation of the platform-independent Mustache project, that allows to render input data in a template using a very clean syntax. Mustache has a so-called logic-lesstemplate syntax because there are no explicit control flow statements, all needed logic comes exclusively from the data in the form of booleans, arrays or lambdas."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "optile", "dataTypeProperties": [["Description", "Optile is a payment platform that allows to access a set of heterogeneous payment methods and providers (e.g. credit cards, direct debit, PayPal) under a common interface. Once the web-shop has the platform integrated, the set of payment options can be extended or reduced without any extra implementation effort. Optile has five different main levels of integration: redirected, hosted, half-native and native with and without PCI. These are implemented one on top of the other without losing the previous implementation, that way one can go back to lower levels very easily.\n\nThe first level is the universal redirect, where the customer is completely redirected to the payment platform and there he enters his payment data. In the second level that form is hosted in the system via a HTML frame or JavaScript. With the third level the system is in charge of querying the platform about the payment options and display them, but once the user selects one he is redirected to the platform to provide the payment data. The fourth level displays both payment options and forms, taking care of submitting the forms to the platform. The last level requires the system to be PCI compliant, because it gathers the payment data and queries the platform to charge the customer with the provided data."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "dust.js", "dataTypeProperties": [["IsChosen", "false"]]}, {"type": "Technology", "object": "paymill", "dataTypeProperties": [["IsChosen", "false"]]}, {"type": "Stereotype", "object": "JavaScript_stereotype", "dataTypeProperties": []}, {"type": "Stereotype", "object": "server_page_stereotype", "dataTypeProperties": []}, {"type": "Technology", "object": "java", "dataTypeProperties": []}, {"type": "Technology", "object": "sphere.io", "dataTypeProperties": [["Description", "SPHERE.IO is a cloud-based commerce platform, aimed to unify e-commerce data in a single place where any kind of external system can access this information. These external systems are typically web-shops but can actually be any type of application, even those not related to e-commerce. SPHERE.IO provides a platform to store and process all this data according to commerce business rules, while at the same time offers several ways to access it.\n\nThe primary entry point to the backend is provided by a RESTful API, that offers an interface for programmatic access to the data and associated functionality. The API services are using JSON to communicate, always over HTTPS, with previous authorization using OAuth2. Although it is actually the core of the platform, its direct use might be tedious for slightly complex applications. That is the reason why it is recommended to use client libraries and SDKs to communicate with the API, and so improving the development experience."], ["IsChosen", "true"]]}, {"type": "DesignOption", "object": "choice_mixed_client_MVC_1", "dataTypeProperties": [["IsChosen", "true"]]}, {"type": "Technology", "object": "play_framework", "dataTypeProperties": [["Description", "This second version of Play uses Scala in its web template system. Projects in Play are built and deployed with SBT, a build tool for Scala and Java projects, allowing developers to choose between these two programming languages in order to implement the logic of their web applications. Despite this, currently SPHERE.IO Play SDK is supported only in Java projects.\n\nPlay follows the MVC logical architectural pattern and is completely RESTful, which means amongst other things that is stateless, unlike other Java frameworks. It was also designed to support full asynchronous HTTP programming, to serve long-lived requests without tying up other threads. Play also includes the Jackson library to manipulate JSON data and native support for the software testing frameworks JUnit and Selenium. Moreover it also has a compiler for CoffeeScript and LESS, two programming languages that compile into JavaScript and CSS respectively."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "coffeScript", "dataTypeProperties": [["Description", "CoffeeScript is a programming language that compiles into JavaScript, adding syntactic sugar to greatly improve the developer experience. The new syntax provides a better readability of the code and helps developers to write complex scripts much more easily. The increased readability of the code goes along with a decreased number of lines compared to the same code in JavaScript, around one third fewer lines. Another interesting feature is an additional syntax to use JavaScript\u2019s native prototyping as a class-based system, making object-oriented programming with JavaScript less complex, particularly when it comes to inheritance."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "less_css", "dataTypeProperties": [["Description", "Similarly to CoffeeScript, LESS is a language that compiles into CSS. But unlike CoffeeScript, LESS does not modify the syntax of CSS, but only extends it with dynamic behavior, such as variables, operations and functions. This makes LESS very easy to learn and converts a simple CSS-based file into a powerful dynamic stylesheet."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "scala", "dataTypeProperties": [["Description", "Scala is a object-functional programming language that runs on JVM and is compatible with Java scripts."], ["IsChosen", "true"]]}, {"type": "Technology", "object": "jquery", "dataTypeProperties": [["IsChosen", "true"]]}, {"type": "ArchitecturalPattern", "object": "thin_client_MVC", "dataTypeProperties": [["Description", "As the name suggests, the system logic is divided into three components: Model, View and Controller. As a rough definition, the Model manages business logic and domain data, the View is responsible of displaying the information, and the Controller is in charge of changing Model and View accordingly to the user input.\n\nThe specific MVC design of the current system is shown in Figure 4.2 below. One of the particularities of this design is that SPHERE.IO Play SDK is the main component of the Model, since it controls all the domain data of the application, as well as most of the business logic. Only some business rules are added to the Model in order to validate form input coming from the user, before sending this data to SPHERE.IO Play SDK, as well as some external functionalities such as email sending and online payment."]]}, {"type": "ArchitecturalPattern", "object": "fat_client_MVC", "dataTypeProperties": [["Description", "A fat client allows the user to interact with the system while never reloading the web page, only updating those specific components of the page that changed during the interaction. This behavior enhances the user experience, because the user can continue interacting with the system while operations are taking place. Information can also be presented in an incremental way, so that the user can start interacting with some elements of the page while further information is being retrieved. Another important fact is that traffic between the client and the system is reduced to simple data with no presentation information, which speeds up the communication with the system and decreases network use."]]}, {"type": "Package", "object": "client_view_package_1", "dataTypeProperties": []}, {"type": "Package", "object": "client_model_package_1", "dataTypeProperties": []}, {"type": "Package", "object": "client_controller_package_1", "dataTypeProperties": []}, {"type": "FunctionalRequirement", "object": "add_item_to_cart", "dataTypeProperties": [["Priority", "1"], ["Description", "As a customer, I want to add a particular product to the shopping cart, so that I can buy it with the next order."]]}, {"type": "ClassPackage", "object": "AddressForms", "dataTypeProperties": []}, {"type": "ClassPackage", "object": "PasswordForms", "dataTypeProperties": []}, {"type": "ClassPackage", "object": "CustomerForms", "dataTypeProperties": []}, {"type": "ClassPackage", "object": "PaymentForms", "dataTypeProperties": []}, {"type": "Feature", "object": "manage_account", "dataTypeProperties": [["Description", "Finally, for the use cases related to account management (Figure 3.5), a registered customer can manage his address book (i.e. add, update or remove postal addresses) or update his account (i.e. change his personal data or password). He can as well decide to log out from the system and become an anonymous customer. As an anonymous customer, he can sign up a new account or log in with an existing one. In case he cannot remember his credentials, he will be given the option to recover his password."]]}, {"type": "DesignOption", "object": "choice_use_SPHERE", "dataTypeProperties": [["IsChosen", "true"]]}, {"type": "DesignOption", "object": "choice_three_tier_client_server_1", "dataTypeProperties": [["IsChosen", "true"]]}, {"type": "Technology", "object": "html5", "dataTypeProperties": []}, {"type": "Technology", "object": "json", "dataTypeProperties": []}, {"type": "Role", "object": "server_controller_1", "dataTypeProperties": []}, {"type": "Role", "object": "server_model_1", "dataTypeProperties": []}, {"type": "Role", "object": "server_view_1", "dataTypeProperties": []}, {"type": "Role", "object": "client_view_1", "dataTypeProperties": []}, {"type": "Role", "object": "client_model_1", "dataTypeProperties": []}, {"type": "Role", "object": "client_controller_1", "dataTypeProperties": []}, {"type": "Argument", "object": "arg_dust.js", "dataTypeProperties": [["Description", "There is another project, Dust.js, with the same strong points as Handlebars and with useful additional features like template composition. Apparently is a better choice but the project has been abandoned for two years, maybe the reason why Handlebars has the largest community. During the last year LinkedIn has been contributing actively to a separated Dust.js project that the company is using for its website [Bas12]. Regardless it has been considered that Handlebars is a safer option, since the additional features are not indispensable for this project."]]}, {"type": "Argument", "object": "arg_handlbars", "dataTypeProperties": [["Description", "On the contrary Handlebars templates are compiled, allowing to define helpers to reuse code for presentation. It also comes with built-in helpers to control the default flow of the template, such as loops or conditional statements. Handlebars comes also with better support for paths to access the data. In short, this solution makes easier to implement templates than Mustache while still keeping logic separated from presentation."]]}, {"type": "Argument", "object": "arg_less_css", "dataTypeProperties": [["Description", "LESS will allow to better organize the stylesheet of the web-shop, thus facilitating a swift development, fast edition and easy understanding of its code. Although there are other CSS preprocessors like the popular Sass, the provided functionalities are quite similar and Play Framework already comes with a native support of the LESS compiler."]]}, {"type": "Argument", "object": "arg_play_framework", "dataTypeProperties": [["Description", "The use of Play Framework comes as a requirement to test the suitability of SPHERE.IO Play SDK, which was build to create web-shops using this specific framework. Play is an open source web application framework that was first released in 2007 and written in Java. In 2012 a second release was announced, with a core completely rewritten in Scala. This is precisely the version that SPHERE.IO Play SDK works with."]]}, {"type": "Argument", "object": "arg_html5_json", "dataTypeProperties": [["Description", "The server is using HTML5 and JSON files to send information to the client."]]}, {"type": "Argument", "object": "arg_optile", "dataTypeProperties": [["Description", "In opposite to traditional payment platforms, the successful integration of Optile will attest that this web-shop supports a wide range of payment methods and providers, as well as multiple different ways of integration. It is also a good choice for developers, who will have a system with several online payment methods already implemented. Optile first integration can become a little bit tedious, but its flexibility will be profitable for this project."]]}, {"type": "Argument", "object": "arg_jquery", "dataTypeProperties": [["Description", "jQuery is a very powerful and fast JavaScript library that allows to easily do DOM scripting (i.e. HTML elements manipulation and event handling), perform animations and simplify the use of AJAX programming; altogether very necessary in this project. The main alternatives, such as MooTools or YUI Library, are also very satisfactory solutions in the mentioned areas, with no significant differences. The final choice of jQuery has been mainly determined by the fact that it has the largest community amongst the options."]]}, {"type": "Argument", "object": "arg_coffeescript", "dataTypeProperties": [["Description", "Improving developer experience is a priority in this project, so CoffeeScript will contribute to make client-side code easier to understand and modify. It will also be considerably helpful with the development of the JavaScript code, which is pretty complex due to the logical design of the system. Therefore its use is very appropriate, especially since a CoffeeScript compiler comes included in Play Framework."]]}, {"type": "Argument", "object": "arg_scala", "dataTypeProperties": []}, {"type": "Argument", "object": "arg_sphere.io", "dataTypeProperties": [["Description", "The SPHERE.IO team chose Java as the first programming language to have a client library due to its versatility. This library is open source, as it is intended to be improved or used as a reference to build other libraries by the developer community. In order to provide a better environment to build websites, a SDK was built on top of the client library: the SPHERE.IO Play SDK. It allowed to adapt the Java client library to the processes and structure of the Play Framework.\n\nA command-line interface (CLI) is also available, especially aimed for managing SPHERE.IO user accounts and projects from a command-line shell. It is also necessary to use the CLI in order to manipulate and query data in batches or for automated jobs, such as importingproducts into SPHERE.IO. As opposed to the API, the CLI is not using OAuth2 since all operations are done under a user account.\n\nSo far all the tools for accessing and managing the backend data were focused on developers, but merchants have also the possibility to view and update the data using a web application called Merchant Center. Besides that, merchants can also export and import data between SPHERE.IO and other external systems using elastic.io as an integration platform."]]}, {"type": "Argument", "object": "arg_java", "dataTypeProperties": [["Description", "The SPHERE.IO team chose Java as the first programming language to have a client library due to its versatility. This library is open source, as it is intended to be improved or used as a reference to build other libraries by the developer community. In order to provide a better environment to build websites, a SDK was built on top of the client library: the SPHERE.IO Play SDK. It allowed to adapt the Java client library to the processes and structure of the Play Framework."]]}, {"type": "Argument", "object": "arg_paymill", "dataTypeProperties": [["Description", "A valid alternative is Paymill, a popular payment solution which characteristics are completely opposed to Optile: the integration is very fast and easy, but the payment providers offered are limited to credit card and direct debit. Also the customer is never redirected to the payment server, yet there is no need to be PCI compliant. The reason is that the payment form is never submitted, but its data is sent to the payment server via a JavaScript library, returning a token in exchange that the system can use to charge the customer from the server side. Nevertheless the selected solution is Optile, because its implementation will benefit more the project than Paymill."]]}, {"type": "FunctionalRequirement", "object": "filter_by_category", "dataTypeProperties": [["Priority", "2"], ["Description", "As a customer, I want to see only those products that belong to a particular category and any category descendant, so that I can narrow down the list to what fits best my needs."]]}, {"type": "FunctionalRequirement", "object": "pagination", "dataTypeProperties": [["Priority", "3"], ["Description", "The product list needs to be displayed divided into pages and the customer should be given the ability to browse through them."]]}, {"type": "FunctionalRequirement", "object": "empty_list_message", "dataTypeProperties": [["Priority", "5"], ["Description", "As a customer, I want to be informed with an informative message when a product list request has no results."]]}, {"type": "FunctionalRequirement", "object": "filter_by_color", "dataTypeProperties": [["Priority", "4"], ["Description", "As a customer, I want to see only those products from the product list which main color matches any of the colors I selected, so that I can narrow down the list to best fit my liking."]]}, {"type": "FunctionalRequirement", "object": "breadcrumb", "dataTypeProperties": [["Priority", "6"], ["Description", "As a customer, I want to be informed of my location inside the category tree via a breadcrumb, so that it can help me to navigate and have a better understanding of the web-shop structure."]]}, {"type": "FunctionalRequirement", "object": "product_detail", "dataTypeProperties": [["Priority", "1"], ["Description", "As a customer, I want to see all information regarding a particular product and its variants, so that I can make a better decision about buying it."]]}, {"type": "FunctionalRequirement", "object": "list_products", "dataTypeProperties": [["Priority", "1"], ["Description", "As a customer, I want to list all products of the shop."]]}, {"type": "FunctionalRequirement", "object": "sort_by_name", "dataTypeProperties": [["Priority", "9"], ["Description", "As a customer, I want to sort the products from the product list by their name in an ascendant or descendant order."]]}, {"type": "FunctionalRequirement", "object": "sort_by_price", "dataTypeProperties": [["Priority", "8"], ["Description", "As a customer, I want to sort the products from the product list by their price in an ascendant or descendant order."]]}, {"type": "FunctionalRequirement", "object": "filter_by_price", "dataTypeProperties": [["Priority", "3"], ["Description", "As a customer, I want to see only those products from the product list which prices fall within a specific price range, so that I can narrow down the list to best fit my economic requirements."]]}, {"type": "FunctionalRequirement", "object": "not_found_message", "dataTypeProperties": [["Priority", "10"], ["Description", "As a customer, I want to be informed with an informative message when a category or product I requested cannot be found."]]}, {"type": "Argument", "object": "arg_MVC", "dataTypeProperties": [["Description", "The logical architecture of the system is designed after the MVC (Model-View-Controller) architectural pattern, which is widely used in web applications design. Its use in this project is required, since MVC is the architecture pattern followed by Play Framework, the web framework on which SPHERE.IO Play SDK has been developed."]]}, {"type": "Argument", "object": "arg_mix_client", "dataTypeProperties": [["Description", "A mixed approach between a fat and a thin client can be the solution to improve the user experience without giving up on the browser logic. The website can be divided into different contexts that offer the user some common functionalities. Between contexts the web page is fully reloaded, while operations within the contexts only update some parts of the page [Con13]. By way of example, each product detail page is a different context, but adding a product to the shopping cart only updates the mini-cart displayed, while the user never leaves the page."]]}, {"type": "Argument", "object": "arg_thin_client", "dataTypeProperties": [["Description", "With this design, a new whole web page must be loaded from the server every time the user wants to interact with the system. This is known as a \u201cthin client\u201d design, because all the logic is located in the server, leaving the client with the only task of rendering the web page. In comparison with that, a \u201cfat client\u201d hosts all the logic of the system; hence Controller, View and Model are located on the client side, leaving in the server just those parts of the Model responsible for the security and management of persistence."]]}, {"type": "Argument", "object": "arg_fat_client", "dataTypeProperties": [["Description", "A fat client allows the user to interact with the system while never reloading the web page, only updating those specific components of the page that changed during the interaction. This behavior enhances the user experience, because the user can continue interacting with the system while operations are taking place. Information can also be presented in an incremental way, so that the user can start interacting with some elements of the page while further information is being retrieved. Another important fact is that traffic between the client and the system is reduced to simple data with no presentation information, which speeds up the communication with the system and decreases network use.\n\nWhile a fat client solves some external design issues, it also creates several technical problems. Since the web page is never reloading, the browser can no longer control the routing, caching or history management of it. Therefore it is the responsibility of the system to replace those functionalities that the browser is unable to perform.\n\nThese technical problems can be considered a too expensive price to pay in order to improve the user experience. The amount of resources needed to implement a reliable system with a pure fat client is several times higher than the equivalent with a thin client. Moreover the complexity of the code is also very significant, which makes this design not suitable for a template that must be understandable and easy to learn."]]}, {"type": "Role", "object": "data_server_1", "dataTypeProperties": []}, {"type": "Role", "object": "server_1", "dataTypeProperties": []}, {"type": "Role", "object": "client_1", "dataTypeProperties": []}, {"type": "FunctionalRequirement", "object": "update_account", "dataTypeProperties": [["Priority", "6"], ["Description", "As a registered customer, I want to update my personal data such as the email address used."]]}, {"type": "FunctionalRequirement", "object": "add_address", "dataTypeProperties": [["Priority", "5"], ["Description", "As a registered customer, I want to add a postal address to my address book, so that I can select it as shipping or billing address when placing an order."]]}, {"type": "FunctionalRequirement", "object": "recover_password", "dataTypeProperties": [["Priority", "7"], ["Description", "As an anonymous customer, I want to be able to recover my password, so that I can log in with my account when I forget my current password."]]}, {"type": "FunctionalRequirement", "object": "log_in", "dataTypeProperties": [["Priority", "4"], ["Description", "As an anonymous customer, I want to log in with an existing customer account, so that I take advantage of the benefits of being a registered customer."]]}, {"type": "FunctionalRequirement", "object": "log_out", "dataTypeProperties": [["Priority", "5"], ["Description", "As a registered customer, I want to logout from my customer account, so that nobody else can use it from the same machine."]]}, {"type": "FunctionalRequirement", "object": "change_password", "dataTypeProperties": [["Priority", "5"], ["Description", "As a registered customer, I want to change my current password to another one of my choice."]]}, {"type": "FunctionalRequirement", "object": "remove_address", "dataTypeProperties": [["Priority", "5"], ["Description", "As a registered customer, I want to remove a particular postal address from my address book, so that I cannot longer select it when placing an order."]]}, {"type": "FunctionalRequirement", "object": "sign_up", "dataTypeProperties": [["Priority", "4"], ["Description", "As an anonymous customer, I want to sign up a new customer account, so that I can place orders more easily and take advantage of many other benefits."]]}, {"type": "FunctionalRequirement", "object": "update_address", "dataTypeProperties": [["Priority", "6"], ["Description", "As a registered customer, I want to update the data of a particular postal address from my address book, so that it corresponds to my current situation."]]}, {"type": "FunctionalRequirement", "object": "update_item_in_cart", "dataTypeProperties": [["Priority", "6"], ["Description", "As a customer, I want to change the number of units of a particular item in the shopping cart, so that I can buy a different quantity of the product with the next order"]]}, {"type": "FunctionalRequirement", "object": "mini_cart", "dataTypeProperties": [["Priority", "5"], ["Description", "As a customer, I want to be able to see my current shopping cart from any page via a so-called mini-cart, so that I can always be aware of its contents and pricing details."]]}, {"type": "FunctionalRequirement", "object": "payment", "dataTypeProperties": [["Priority", "4"], ["Description", "As a customer, I want to be able to pay online my orders, so that I can pay immediately the moment I buy them instead of using other possibly unpleasant billing options."]]}, {"type": "FunctionalRequirement", "object": "place_order", "dataTypeProperties": [["Priority", "2"], ["Description", "As a customer, I want to place an order, so that I can actually buy the items in my shopping cart."]]}, {"type": "FunctionalRequirement", "object": "list_orders", "dataTypeProperties": [["Priority", "5"], ["Description", "As a registered customer, I want to see a list of my orders, so that I can see all the purchases I did in the past."]]}, {"type": "FunctionalRequirement", "object": "remove_item_from_cart", "dataTypeProperties": [["Priority", "3"], ["Description", "As a customer, I want to remove a particular item from the shopping cart, so that I do not buy it with the next order"]]}, {"type": "Constraint", "object": "constraint_SPHERE", "dataTypeProperties": []}, {"type": "Constraint", "object": "constraint_play_framework_MVC", "dataTypeProperties": [["Description", "The logical architecture of the system is designed after the MVC (Model-View-Controller) architectural pattern, which is widely used in web applications design. Its use in this project is required, since MVC is the architecture pattern followed by Play Framework, the web framework on which SPHERE.IO Play SDK has been developed."]]}, {"type": "Feature", "object": "display_products", "dataTypeProperties": [["Description", "The use cases for displaying products are shown below in Figure 3.3. The customer can either list a set of products or display a particular product. Further additional functionalities can be applied to the product listing, individually or combined together, in order to alter the list itself (i.e. filtering) or the way the products are listed (i.e. sorting and pagination)."]]}, {"type": "ArchitecturalPattern", "object": "three_tiered_client-server_1", "dataTypeProperties": [["Description", "The designed system follows a client-server architecture with three tiers: the client, the web application server and the data server tier. The data tier corresponds to the SPHERE.IO backend, which offers a scalable cloud-based platform for the e-commerce data, having the capability of scaling up as the demand increases. The application tier needs an enterprise hosting solution, suitable for a company web-shop. In order to take advantage of the scalability of the data tier, a good matching web hosting solution would be a cloud service with easy and fast scalability, letting the shop grow as the number of customers grow, without any bottleneck."]]}, {"type": "Stakeholder", "object": "customer", "dataTypeProperties": [["Description", "End users or customers7, equally mentioned as \u201cusers\u201d and \u201ccustomers\u201d in this document, are those actors of the system who would buy in the web-shop in case it went live. Even being an hypothetical situation, this template will be used as a bootstrap project so eventually it will become a real web-shop with end users. With no other specific information about these users, it can only be assumed that they need an intuitive layout that allows them to shop with ease in a few clicks."]]}, {"type": "UserStory", "object": "show_cart_detail", "dataTypeProperties": [["Description", "When the shopping cart is requested, display the cart contents and the price details.\n\nWhen the shopping cart is empty, show an informative message."]]}, {"type": "UserStory", "object": "add_item_to_cart_user_story", "dataTypeProperties": [["Description", "When a product is requested to be added to the shopping cart, add the selected variant in the cart and display the updated cart content.\n\nWhen the product is already in the cart, the quantity will be updated with the addition.\n\nWhen the selected product does not exist, show a bad request error message."]]}, {"type": "UserStory", "object": "show_product_variant_detail", "dataTypeProperties": [["Description", "When a product variant is requested, the chosen product variant will be displayed with all its information and pictures, as well as all other possible variants of that product.\n\nWhen the selected product variant does not exist, display the default variant instead.\n\nWhen the selected product does not exist, show a not found error message."]]}, {"type": "UserStory", "object": "list_home_products", "dataTypeProperties": [["Description", "When the home page is requested, display all products of the shop.\n\nWhen no products found, show an informative message."]]}, {"type": "UserStory", "object": "recover_password_user_story", "dataTypeProperties": [["Description", "When the user password is requested to be recovered, send email to the address provided with a temporary link to the recovery page, where the user can insert a new password.\n\nWhen the email provided does not exist, show a bad request error message and pre-fill form."]]}, {"type": "UserStory", "object": "edit_user_data", "dataTypeProperties": [["Description", "When the user data is requested to be updated, edit data and display updated user profile.\n\nWhen invalid data provided, show a bad request error message and pre-fill the form.\n\nWhen the user is not logged in, show an unauthorized error message and display login."]]}, {"type": "UserStory", "object": "show_user_profile", "dataTypeProperties": [["Description", "When the user profile is requested, display the user data, change password and address book forms, as well as the list of orders from the user.\n\nWhen the user is not logged in, show an unauthorized error message and display login."]]}, {"type": "UserStory", "object": "remove_item_from_cart_user_story", "dataTypeProperties": [["Description", "When a product from the shopping cart is requested to be removed in the cart detail page, remove the item from the cart and display the updated cart content.\n\nWhen the item does not exist in the cart, show a bad request error message."]]}, {"type": "UserStory", "object": "edit_user_password", "dataTypeProperties": [["Description", "When the user password is requested to be updated, change password and display user profile.\n\nWhen invalid current password provided, show a bad request error message.\n\nWhen the user is not logged in, show an unauthorized error message and display login."]]}, {"type": "UserStory", "object": "filter_products_by_color", "dataTypeProperties": [["Description", "When a color filtering is requested in any product list page, the chosen color will be displayed, as well as all products from the previous list whose main color matches the selected color.\n\nWhen more than one color is selected at once, products whose main color matches any of the selected colors will be displayed.\n\nWhen no products found, show an informative message."]]}, {"type": "UserStory", "object": "remove_address_from_address_book", "dataTypeProperties": [["Description", "When an address is requested to be removed in the user profile page, remove the address from the address book and display the updated user profile.\n\nWhen the address does not exist in the address book, show a bad request error message."]]}, {"type": "UserStory", "object": "update_item_in_cart_user_story", "dataTypeProperties": [["Description", "When the quantity of an item in the shopping cart is requested to be updated in the cart detail page, replace the previous quantity with the new one provided and display the updated cart content.\n\nWhen the item does not exist in the cart, show a bad request error message.\n\nWhen the new quantity is invalid, show a bad request error message."]]}, {"type": "UserStory", "object": "add_address_to_address_book", "dataTypeProperties": [["Description", "When an address is requested to be added to the address book in the user profile page, add the selected address in the address book and display the updated user profile.\n\nWhen the address is invalid, show a bad request error message and pre-fill the form."]]}, {"type": "UserStory", "object": "show_product_detail", "dataTypeProperties": [["Description", "When a product is requested, the chosen product will be displayed with all its information and pictures, as well as all the possible variants of that product.\n\nWhen the selected product does not exist, show a not found error message."]]}, {"type": "UserStory", "object": "do_log_out", "dataTypeProperties": [["Description", "When logging out a user is requested, sign out the user and display the last visited page.\n\nWhen user already logged out, display the last visited page."]]}, {"type": "UserStory", "object": "do_sign_up", "dataTypeProperties": [["Description", "When signing up a new user is requested, register the user and display the user profile.\n\nWhen user already registered, show a bad request error message and pre-fill form.\n\nWhen invalid data provided, show a bad request error message and pre-fill the form."]]}, {"type": "UserStory", "object": "update_address_in_address_book", "dataTypeProperties": [["Description", "When an address is requested to be updated in the user profile page, replace the previous address with the new provided and display the updated user profile.\n\nWhen the address does not exist in the address book, add it to the address book.\n\nWhen the address is invalid, show a bad request error message and pre-fill the form."]]}, {"type": "UserStory", "object": "filter_products_by_price", "dataTypeProperties": [["Description", "When a price range filtering is requested in any product list page, the chosen price range will be displayed, as well as all products from the previous list (discarding any previous price filtering) whose price falls within the range.\n\nWhen minimum and maximum price are swapped, recover exchanging them.\n\nWhen invalid price provided, dismiss the price filter request.\n\nWhen no products found, show an informative message."]]}, {"type": "UserStory", "object": "do_log_in", "dataTypeProperties": [["Description", "When logging in a user is requested, sign in with the user and display the user profile.\n\nWhen invalid credentials provided, show an unauthorized error message and pre-fill form.\n\nWhen user already logged in, display the user profile."]]}, {"type": "UserStory", "object": "finish_checkout", "dataTypeProperties": [["Description", "When the checkout process is requested to finish, display success message and all order details (i.e. cart content, price details, shipping and billing options).\n\nWhen invalid data provided, show a bad request error message and pre-fill the forms.\n\nWhen the shopping cart is empty, display the last visited page."]]}, {"type": "UserStory", "object": "list_products_from_category", "dataTypeProperties": [["Description", "When a category is requested, the chosen category will be indicated and its immediate children categories will be displayed, as well as all products belonging to that category or any descendant category.\n\nWhen the selected category does not exist, show a not found error message.\n\nWhen no products found, show an informative message."]]}, {"type": "UserStory", "object": "start_checkout", "dataTypeProperties": [["Description", "When the checkout process is requested to start, display an order summary (i.e. cart content and price details) and the corresponding shipping and billing forms.\n\nWhen the shopping cart is empty, display the last visited page."]]}, {"type": "Diagram", "object": "figure_3.3_display_products", "dataTypeProperties": [["Description", "Diagram showing the use cases of the display products package."]]}, {"type": "Diagram", "object": "figure_3.5_manage_account", "dataTypeProperties": [["Description", "Use case diagram showing the use cases of the manage account package."]]}, {"type": "Stakeholder", "object": "client_stakeholder", "dataTypeProperties": [["Description", "Potential clients of the project, simplified as \u201cclients\u201d from now on, are companies in need of an e-commerce solution, especially those looking for an interface from where to sell goods or services to individuals or other companies. They need a system that satisfies their current requirements and allows them to easily implement future required functionalities. They hire developers, usually working in agencies, to build these tailored applications."]]}, {"type": "Stakeholder", "object": "SPHERE.IO_product_owner", "dataTypeProperties": [["Description", "Inside the company there are two major stakeholders: the SPHERE.IO product owners and the developer team. The product owners need a final product where all the platform features are implemented in order to measure the actual progress of the project. This product also allows them to have a sample web-shop to show to potential clients in meetings and conferences even before the platform is released."]]}, {"type": "Stakeholder", "object": "user_stakeholder", "dataTypeProperties": [["Description", "Potential users of the template are precisely developers, who need to implement a web-shop or a similar application. They might have to decide whether to develop a web-shop based on SPHERE.IO Play SDK. They may want to use the template as a live documentation of how to use the system or directly use it as a bootstrap project on which to build their own web-shop. They need to easily understand the sample code and quickly identify those lines of code with shop logic coming from SPHERE.IO. Code quality and correct use of technologies may be important for them."]]}, {"type": "Stakeholder", "object": "SPHERE.IO_development_team", "dataTypeProperties": [["Description", "On the other hand, the development team is in charge of designing and implementing the platform that the template is using. Their primary need towards the template is to verify that their implementation is adjusting to both developers and clients needs. They might create temporal limitations on the template design, but at the same time any suggestion may be quickly adopted with no need to change the web-shop requirements."]]}, {"type": "Argument", "object": "arg_use_SPHERE", "dataTypeProperties": [["Description", "The project has two main objectives that are strongly connected. One objective is to analyze, design and develop the first web-shop using the SPHERE.IO platform. This implementation will provide a first open source template, which then can be reused by developers to build their own web-shops. Additionally the source code will serve as a live documentation about how to use the platform."]]}]; allRelations = [["filter_by_category", "performedBy", "customer"], ["pagination", "performedBy", "customer"], ["empty_list_message", "performedBy", "customer"], ["filter_by_color", "performedBy", "customer"], ["update_item_in_cart", "performedBy", "customer"], ["add_item_to_cart", "performedBy", "customer"], ["breadcrumb", "performedBy", "customer"], ["product_detail", "performedBy", "customer"], ["list_products", "performedBy", "customer"], ["mini_cart", "performedBy", "customer"], ["sort_by_name", "performedBy", "customer"], ["sort_by_price", "performedBy", "customer"], ["filter_by_price", "performedBy", "customer"], ["payment", "performedBy", "customer"], ["not_found_message", "performedBy", "customer"], ["place_order", "performedBy", "customer"], ["list_orders", "performedBy", "customer"], ["remove_item_from_cart", "performedBy", "customer"], ["filter_by_category", "partOf", "display_products"], ["pagination", "partOf", "display_products"], ["empty_list_message", "partOf", "display_products"], ["filter_by_color", "partOf", "display_products"], ["breadcrumb", "partOf", "display_products"], ["product_detail", "partOf", "display_products"], ["list_products", "partOf", "display_products"], ["sort_by_name", "partOf", "display_products"], ["sort_by_price", "partOf", "display_products"], ["filter_by_price", "partOf", "display_products"], ["not_found_message", "partOf", "display_products"], ["filter_by_category", "partOf", "browse_catalog"], ["add_item_to_cart", "partOf", "browse_catalog"], ["product_detail", "partOf", "browse_catalog"], ["list_products", "partOf", "browse_catalog"], ["arg_MVC", "partOf", "choice_mixed_client_MVC_1"], ["arg_mix_client", "partOf", "choice_mixed_client_MVC_1"], ["arg_thin_client", "partOf", "choice_mixed_client_MVC_1"], ["arg_fat_client", "partOf", "choice_mixed_client_MVC_1"], ["data_server_1", "partOf", "three_tiered_client-server_1"], ["server_1", "partOf", "three_tiered_client-server_1"], ["client_1", "partOf", "three_tiered_client-server_1"], ["Forms", "partOf", "web_application_server_model_package_1"], ["Mail", "partOf", "web_application_server_model_package_1"], ["ControllerHelper", "partOf", "web_application_server_model_package_1"], ["Sphere", "partOf", "web_application_server_model_package_1"], ["Payment", "partOf", "web_application_server_model_package_1"], ["update_account", "partOf", "manage_account"], ["add_address", "partOf", "manage_account"], ["recover_password", "partOf", "manage_account"], ["log_in", "partOf", "manage_account"], ["log_out", "partOf", "manage_account"], ["change_password", "partOf", "manage_account"], ["remove_address", "partOf", "manage_account"], ["sign_up", "partOf", "manage_account"], ["update_address", "partOf", "manage_account"], ["web_application_server_model_package_1", "partOf", "web_application_server_package_1"], ["AddressForms", "partOf", "Forms"], ["CartForms", "partOf", "Forms"], ["PaymentForms", "partOf", "Forms"], ["PasswordForms", "partOf", "Forms"], ["CustomerForms", "partOf", "Forms"], ["update_item_in_cart", "partOf", "purchase_products"], ["mini_cart", "partOf", "purchase_products"], ["payment", "partOf", "purchase_products"], ["place_order", "partOf", "purchase_products"], ["list_orders", "partOf", "purchase_products"], ["remove_item_from_cart", "partOf", "purchase_products"], ["constraint_SPHERE", "partOf", "choice_use_SPHERE"], ["constraint_play_framework_MVC", "partOf", "play_framework"], ["web_applicaton_server_controller_package_1", "partOf", "web_application_server_package_1"], ["server_controller_1", "partOf", "thin_client_MVC"], ["server_controller_1", "partOf", "fat_client_MVC"], ["server_model_1", "partOf", "thin_client_MVC"], ["server_model_1", "partOf", "fat_client_MVC"], ["add_item_to_cart", "partOf", "purchase_products"], ["MiniCart", "partOf", "client_model_package_1"], ["web_application_server_view_package_1", "partOf", "web_application_server_package_1"], ["server_view_1", "partOf", "thin_client_MVC"], ["client_view_1", "partOf", "fat_client_MVC"], ["ViewHelper", "partOf", "web_application_server_model_package_1"], ["client_model_1", "partOf", "fat_client_MVC"], ["client_controller_1", "partOf", "fat_client_MVC"], ["arg_dust.js", "partOf", "dust.js"], ["client_view_package_1", "partOf", "client_package_1"], ["arg_handlbars", "partOf", "handlebars"], ["arg_less_css", "partOf", "less_css"], ["client_model_package_1", "partOf", "client_package_1"], ["arg_play_framework", "partOf", "play_framework"], ["arg_html5_json", "partOf", "html5"], ["arg_html5_json", "partOf", "json"], ["arg_optile", "partOf", "optile"], ["arg_jquery", "partOf", "jquery"], ["arg_coffeescript", "partOf", "coffeScript"], ["arg_scala", "partOf", "scala"], ["arg_sphere.io", "partOf", "sphere.io"], ["client_controller_package_1", "partOf", "client_package_1"], ["arg_java", "partOf", "java"], ["arg_paymill", "partOf", "paymill"], ["sphere_io_package_1", "playsRole", "data_server_1"], ["web_applicaton_server_controller_package_1", "playsRole", "server_controller_1"], ["web_application_server_model_package_1", "playsRole", "server_model_1"], ["web_application_server_package_1", "playsRole", "server_1"], ["web_application_server_view_package_1", "playsRole", "server_view_1"], ["client_view_package_1", "playsRole", "client_view_1"], ["client_model_package_1", "playsRole", "client_model_1"], ["client_controller_package_1", "playsRole", "client_controller_1"], ["client_package_1", "playsRole", "client_1"], ["data_server_1", "roleImplementedBy", "sphere_io_package_1"], ["server_controller_1", "roleImplementedBy", "web_applicaton_server_controller_package_1"], ["server_model_1", "roleImplementedBy", "web_application_server_model_package_1"], ["server_1", "roleImplementedBy", "web_application_server_package_1"], ["server_view_1", "roleImplementedBy", "web_application_server_view_package_1"], ["client_view_1", "roleImplementedBy", "client_view_package_1"], ["client_model_1", "roleImplementedBy", "client_model_package_1"], ["client_controller_1", "roleImplementedBy", "client_controller_package_1"], ["client_1", "roleImplementedBy", "client_package_1"], ["sphere_io_package_1", "modeledIn", "figure_4.2_logical_architecture"], ["web_application_server_package_1", "modeledIn", "figure_4.2_logical_architecture"], ["client_package_1", "modeledIn", "figure_4.2_logical_architecture"], ["web_applicaton_server_controller_package_1", "modeledIn", "figure_4.39_web_application_server_contoller_component"], ["purchase_products", "modeledIn", "figure_3.4_purchase_products"], ["MiniCart", "modeledIn", "Figure_4.35_client_side_model_component"], ["web_application_server_model_package_1", "modeledIn", "figure_4.33_web_application_server_model_component"], ["Forms", "modeledIn", "figure_4.33_web_application_server_model_component"], ["Mail", "modeledIn", "figure_4.33_web_application_server_model_component"], ["ViewHelper", "modeledIn", "figure_4.33_web_application_server_model_component"], ["ControllerHelper", "modeledIn", "figure_4.33_web_application_server_model_component"], ["Sphere", "modeledIn", "figure_4.33_web_application_server_model_component"], ["Payment", "modeledIn", "figure_4.33_web_application_server_model_component"], ["CartForms", "modeledIn", "figure_4.34_web_application_server_form_model_component"], ["web_application_server_view_package_1", "modeledIn", "figure_4.37_web_application_server_simple_views"], ["web_application_server_view_package_1", "modeledIn", "figure_4.36_web_application_server_view_component"], ["browse_catalog", "modeledIn", "figure_3.7_browse_catalog"], ["choice_use_SPHERE", "causes", "choice_mixed_client_MVC_1"], ["choice_use_SPHERE", "causes", "choice_three_tier_client_server_1"], ["play_framework", "causes", "scala"], ["choice_three_tier_client_server_1", "causes", "choice_mixed_client_MVC_1"], ["choice_three_tier_client_server_1", "causes", "html5"], ["choice_three_tier_client_server_1", "causes", "json"], ["web_application_server_package_1", "compriseOf", "web_applicaton_server_controller_package_1"], ["thin_client_MVC", "compriseOf", "server_controller_1"], ["fat_client_MVC", "compriseOf", "server_controller_1"], ["thin_client_MVC", "compriseOf", "server_model_1"], ["fat_client_MVC", "compriseOf", "server_model_1"], ["purchase_products", "compriseOf", "add_item_to_cart"], ["client_model_package_1", "compriseOf", "MiniCart"], ["web_application_server_package_1", "compriseOf", "web_application_server_view_package_1"], ["thin_client_MVC", "compriseOf", "server_view_1"], ["fat_client_MVC", "compriseOf", "client_view_1"], ["web_application_server_model_package_1", "compriseOf", "ViewHelper"], ["fat_client_MVC", "compriseOf", "client_model_1"], ["fat_client_MVC", "compriseOf", "client_controller_1"], ["dust.js", "compriseOf", "arg_dust.js"], ["client_package_1", "compriseOf", "client_view_package_1"], ["handlebars", "compriseOf", "arg_handlbars"], ["less_css", "compriseOf", "arg_less_css"], ["client_package_1", "compriseOf", "client_model_package_1"], ["play_framework", "compriseOf", "arg_play_framework"], ["html5", "compriseOf", "arg_html5_json"], ["json", "compriseOf", "arg_html5_json"], ["optile", "compriseOf", "arg_optile"], ["jquery", "compriseOf", "arg_jquery"], ["coffeScript", "compriseOf", "arg_coffeescript"], ["scala", "compriseOf", "arg_scala"], ["sphere.io", "compriseOf", "arg_sphere.io"], ["client_package_1", "compriseOf", "client_controller_package_1"], ["java", "compriseOf", "arg_java"], ["paymill", "compriseOf", "arg_paymill"], ["display_products", "compriseOf", "filter_by_category"], ["display_products", "compriseOf", "pagination"], ["display_products", "compriseOf", "empty_list_message"], ["display_products", "compriseOf", "filter_by_color"], ["display_products", "compriseOf", "breadcrumb"], ["display_products", "compriseOf", "product_detail"], ["display_products", "compriseOf", "list_products"], ["display_products", "compriseOf", "sort_by_name"], ["display_products", "compriseOf", "sort_by_price"], ["display_products", "compriseOf", "filter_by_price"], ["display_products", "compriseOf", "not_found_message"], ["browse_catalog", "compriseOf", "filter_by_category"], ["browse_catalog", "compriseOf", "add_item_to_cart"], ["browse_catalog", "compriseOf", "product_detail"], ["browse_catalog", "compriseOf", "list_products"], ["choice_mixed_client_MVC_1", "compriseOf", "arg_MVC"], ["choice_mixed_client_MVC_1", "compriseOf", "arg_mix_client"], ["choice_mixed_client_MVC_1", "compriseOf", "arg_thin_client"], ["choice_mixed_client_MVC_1", "compriseOf", "arg_fat_client"], ["three_tiered_client-server_1", "compriseOf", "data_server_1"], ["three_tiered_client-server_1", "compriseOf", "server_1"], ["three_tiered_client-server_1", "compriseOf", "client_1"], ["web_application_server_model_package_1", "compriseOf", "Forms"], ["web_application_server_model_package_1", "compriseOf", "Mail"], ["web_application_server_model_package_1", "compriseOf", "ControllerHelper"], ["web_application_server_model_package_1", "compriseOf", "Sphere"], ["web_application_server_model_package_1", "compriseOf", "Payment"], ["manage_account", "compriseOf", "update_account"], ["manage_account", "compriseOf", "add_address"], ["manage_account", "compriseOf", "recover_password"], ["manage_account", "compriseOf", "log_in"], ["manage_account", "compriseOf", "log_out"], ["manage_account", "compriseOf", "change_password"], ["manage_account", "compriseOf", "remove_address"], ["manage_account", "compriseOf", "sign_up"], ["manage_account", "compriseOf", "update_address"], ["web_application_server_package_1", "compriseOf", "web_application_server_model_package_1"], ["Forms", "compriseOf", "AddressForms"], ["Forms", "compriseOf", "CartForms"], ["Forms", "compriseOf", "PaymentForms"], ["Forms", "compriseOf", "PasswordForms"], ["Forms", "compriseOf", "CustomerForms"], ["purchase_products", "compriseOf", "update_item_in_cart"], ["purchase_products", "compriseOf", "mini_cart"], ["purchase_products", "compriseOf", "payment"], ["purchase_products", "compriseOf", "place_order"], ["purchase_products", "compriseOf", "list_orders"], ["purchase_products", "compriseOf", "remove_item_from_cart"], ["choice_use_SPHERE", "compriseOf", "constraint_SPHERE"], ["play_framework", "compriseOf", "constraint_play_framework_MVC"], ["choice_mixed_client_MVC_1", "causedBy", "choice_use_SPHERE"], ["choice_three_tier_client_server_1", "causedBy", "choice_use_SPHERE"], ["scala", "causedBy", "play_framework"], ["choice_mixed_client_MVC_1", "causedBy", "choice_three_tier_client_server_1"], ["html5", "causedBy", "choice_three_tier_client_server_1"], ["json", "causedBy", "choice_three_tier_client_server_1"], ["AddressForms", "provides", "manage_account"], ["PasswordForms", "provides", "manage_account"], ["CustomerForms", "provides", "manage_account"], ["CartForms", "provides", "purchase_products"], ["PaymentForms", "provides", "purchase_products"], ["client_model_package_1", "provides", "purchase_products"], ["manage_account", "realizedBy", "AddressForms"], ["manage_account", "realizedBy", "PasswordForms"], ["manage_account", "realizedBy", "CustomerForms"], ["purchase_products", "realizedBy", "CartForms"], ["purchase_products", "realizedBy", "PaymentForms"], ["purchase_products", "realizedBy", "client_model_package_1"], ["java", "resultsIn", "web_applicaton_server_controller_package_1"], ["sphere.io", "resultsIn", "web_application_server_model_package_1"], ["optile", "resultsIn", "web_application_server_model_package_1"], ["java", "resultsIn", "web_application_server_model_package_1"], ["choice_mixed_client_MVC_1", "resultsIn", "thin_client_MVC"], ["choice_mixed_client_MVC_1", "resultsIn", "fat_client_MVC"], ["play_framework", "resultsIn", "web_application_server_package_1"], ["coffeScript", "resultsIn", "web_application_server_package_1"], ["less_css", "resultsIn", "web_application_server_package_1"], ["scala", "resultsIn", "web_application_server_view_package_1"], ["handlebars", "resultsIn", "client_view_package_1"], ["jquery", "resultsIn", "client_model_package_1"], ["jquery", "resultsIn", "client_controller_package_1"], ["MiniCart", "taggedBy", "JavaScript_stereotype"], ["Mail", "taggedBy", "server_page_stereotype"], ["ControllerHelper", "taggedBy", "server_page_stereotype"], ["Sphere", "taggedBy", "server_page_stereotype"], ["Payment", "taggedBy", "server_page_stereotype"], ["CartForms", "satisfies", "add_item_to_cart"], ["add_item_to_cart", "satisfiedBy", "CartForms"], ["handlebars", "hasAlternative", "dust.js"], ["optile", "hasAlternative", "paymill"], ["web_applicaton_server_controller_package_1", "resultOf", "java"], ["web_application_server_model_package_1", "resultOf", "sphere.io"], ["web_application_server_model_package_1", "resultOf", "optile"], ["web_application_server_model_package_1", "resultOf", "java"], ["thin_client_MVC", "resultOf", "choice_mixed_client_MVC_1"], ["fat_client_MVC", "resultOf", "choice_mixed_client_MVC_1"], ["web_application_server_package_1", "resultOf", "play_framework"], ["web_application_server_package_1", "resultOf", "coffeScript"], ["web_application_server_package_1", "resultOf", "less_css"], ["web_application_server_view_package_1", "resultOf", "scala"], ["client_view_package_1", "resultOf", "handlebars"], ["client_model_package_1", "resultOf", "jquery"], ["client_controller_package_1", "resultOf", "jquery"], ["JavaScript_stereotype", "tags", "MiniCart"], ["server_page_stereotype", "tags", "Mail"], ["server_page_stereotype", "tags", "ControllerHelper"], ["server_page_stereotype", "tags", "Sphere"], ["server_page_stereotype", "tags", "Payment"], ["dust.js", "isAlternativeOf", "handlebars"], ["paymill", "isAlternativeOf", "optile"], ["figure_4.2_logical_architecture", "models", "sphere_io_package_1"], ["figure_4.2_logical_architecture", "models", "web_application_server_package_1"], ["figure_4.2_logical_architecture", "models", "client_package_1"], ["figure_4.39_web_application_server_contoller_component", "models", "web_applicaton_server_controller_package_1"], ["figure_3.4_purchase_products", "models", "purchase_products"], ["Figure_4.35_client_side_model_component", "models", "MiniCart"], ["figure_4.33_web_application_server_model_component", "models", "web_application_server_model_package_1"], ["figure_4.33_web_application_server_model_component", "models", "Forms"], ["figure_4.33_web_application_server_model_component", "models", "Mail"], ["figure_4.33_web_application_server_model_component", "models", "ViewHelper"], ["figure_4.33_web_application_server_model_component", "models", "ControllerHelper"], ["figure_4.33_web_application_server_model_component", "models", "Sphere"], ["figure_4.33_web_application_server_model_component", "models", "Payment"], ["figure_4.34_web_application_server_form_model_component", "models", "CartForms"], ["figure_4.37_web_application_server_simple_views", "models", "web_application_server_view_package_1"], ["figure_4.36_web_application_server_view_component", "models", "web_application_server_view_package_1"], ["figure_3.7_browse_catalog", "models", "browse_catalog"]]; allInverseRelations = ["realizedBy", "isAlternativeOf", "causes", "implements", "resultsIn", "partOf", "offeresInterface", "satisfies", "tags", "models", "roleImplementedBy"]